import { readFile } from 'fs/promises'
import { PDFDocument, rgb } from 'pdf-lib'
import fontkit from '@pdf-lib/fontkit'
import { defineEventHandler, send } from 'h3'
import path from 'path'

export default defineEventHandler(async (event) => {
  // フォントファイルのパス
  const fontPath = path.resolve(process.cwd(), 'public', 'NotoSansJP-Regular.ttf')
  const fontBytes = await readFile(fontPath)

  // POSTデータ取得
  const body = await readBody(event)
  const {
    personalityResult = '',
    latestResult = {},
    affirmations = [],
    imageUrl = ''
  } = body || {}

  // PDFドキュメント作成
  const pdfDoc = await PDFDocument.create()
  // fontkitを登録
  pdfDoc.registerFontkit(fontkit)
  const page = pdfDoc.addPage([595.28, 841.89]) // A4サイズ

  // フォント埋め込み（日本語対応）
  const customFont = await pdfDoc.embedFont(fontBytes, { subset: true })

  let y = 800
  const marginX = 50

  // タイトル
  page.drawText('診断結果レポート', {
    x: 297.64,
    y,
    size: 22,
    font: customFont,
    color: rgb(0, 0, 0),
    maxWidth: 495,
    // 中央揃え
  })
  y -= 40

  // 性格診断
  page.drawText('■ 性格診断の結果', {
    x: marginX,
    y,
    size: 16,
    font: customFont,
    color: rgb(0, 0, 0),
  })
  y -= 24
  if (personalityResult) {
    page.drawText(personalityResult, {
      x: marginX,
      y,
      size: 12,
      font: customFont,
      color: rgb(0, 0, 0),
      maxWidth: 495,
    })
    y -= 24
  }
  if (latestResult.gender) {
    page.drawText(`性別: ${latestResult.gender}`, {
      x: marginX,
      y,
      size: 12,
      font: customFont,
      color: rgb(0, 0, 0),
    })
    y -= 20
  }

  // 理想の人物像
  page.drawText('■ 理想の人物像', {
    x: marginX,
    y,
    size: 16,
    font: customFont,
    color: rgb(0, 0, 0),
  })
  y -= 24
  if (latestResult.idealSummary) {
    page.drawText(latestResult.idealSummary, {
      x: marginX,
      y,
      size: 12,
      font: customFont,
      color: rgb(0, 0, 0),
      maxWidth: 495,
    })
    y -= 24
  }

  // 画像埋め込み部分は一時的にコメントアウト
  /*
  if (imageUrl) {
    try {
      // node-fetchはNuxt3/NitroではグローバルfetchでOK
      const imgRes = await fetch(imageUrl)
      if (imgRes.ok) {
        const arrayBuffer = await imgRes.arrayBuffer()
        const imageBytes = Buffer.from(arrayBuffer)
        // png/jpg自動判定
        let img
        if (imageUrl.endsWith('.png')) {
          img = await pdfDoc.embedPng(imageBytes)
        } else {
          img = await pdfDoc.embedJpg(imageBytes)
        }
        const imgDims = img.scale(0.3)
        page.drawImage(img, {
          x: marginX,
          y: y - imgDims.height,
          width: imgDims.width,
          height: imgDims.height,
        })
        y -= imgDims.height + 20
      }
    } catch (e) {
      // 画像埋め込み失敗時はスキップ
    }
  }
  */

  // アドバイス
  if (latestResult.compare) {
    page.drawText('アドバイス:', {
      x: marginX,
      y,
      size: 12,
      font: customFont,
      color: rgb(0, 0, 0),
    })
    y -= 18
    page.drawText(latestResult.compare, {
      x: marginX,
      y,
      size: 12,
      font: customFont,
      color: rgb(0, 0, 0),
      maxWidth: 495,
    })
    y -= 24
  }

  // アファメーション
  if (affirmations && affirmations.length > 0) {
    page.drawText('■ おすすめアファメーション', {
      x: marginX,
      y,
      size: 16,
      font: customFont,
      color: rgb(0, 0, 0),
    })
    y -= 24
    affirmations.forEach((a: string, i: number) => {
      page.drawText(`${i + 1}. ${a}`, {
        x: marginX + 10,
        y,
        size: 12,
        font: customFont,
        color: rgb(0, 0, 0),
        maxWidth: 475,
      })
      y -= 18
    })
  }

  // フッター
  page.drawText('Generated by hacksonic2025', {
    x: 297.64,
    y: 30,
    size: 10,
    font: customFont,
    color: rgb(0, 0, 0),
    maxWidth: 495,
  })

  const pdfBytes = await pdfDoc.save()

  event.node.res.setHeader('Content-Disposition', 'attachment; filename="diagnosis_report.pdf"')
  send(event, Buffer.from(pdfBytes), 'application/pdf')
})
